//********************************************************************************
//
// GameProgress.hpp
//
// ゲーム内の進行度
//
// Date: 2019/07/30 更新
//
//********************************************************************************

#pragma once

//================================================================================
// インクルード
//================================================================================
#include "../../GameManager/GameManager.h"
#include "../../ShareObject/FadeAni/FadeAni.hpp"
#include "../AI/AIManager.hpp"
#include "../Field/FieldManager.h"
#include "../Player/Player.hpp"

//================================================================================
// クラス定義
//================================================================================
class CGameProgress
{
public:

	//--------------------------------------------------------------------------------
	// コンストラクタ
	//--------------------------------------------------------------------------------
	CGameProgress();

	//--------------------------------------------------------------------------------
	// デストラクタ
	//--------------------------------------------------------------------------------
	~CGameProgress();

	//--------------------------------------------------------------------------------
	// ファイル読み込み
	// 引　数：CSystem*	システムクラスのポインタ
	//--------------------------------------------------------------------------------
	void LoadFile(CSystem* pSystem);

	//--------------------------------------------------------------------------------
	// 初期化
	// 引　数：CSystem*	システムクラスのポインタ
	//--------------------------------------------------------------------------------
	void Initialize(CSystem* pSystem);

	//--------------------------------------------------------------------------------
	// 更新
	// 引　数：CSystem*			システムクラスのポインタ
	// 　　　　CFieldManager*	フィールドクラスのポインタ
	// 　　　　CPlayer*			プレイヤークラスのポインタ
	// 　　　　CAIManager*		敵管理クラスのポインタ
	// 　　　　CFadeAni*		フェード管理クラスのポインタ
	//--------------------------------------------------------------------------------
	void Update(CSystem* pSystem, CFieldManager* pField, CPlayer* pPlayer, CAIManager* pAI, CFadeAni* pFade);

	//--------------------------------------------------------------------------------
	// ゲームクリアをしたかどうか
	// 戻り値：const bool	クリアしたならばTRUE
	//--------------------------------------------------------------------------------
	bool IsGameClear() const { return m_isGameClear; };

	//--------------------------------------------------------------------------------
	// ステージクリアをしたかどうか
	// 戻り値：const bool	クリアしたならばTRUE
	//--------------------------------------------------------------------------------
	bool IsStageClear() const { return m_isStageClear; };

	//--------------------------------------------------------------------------------
	// ゲームオーバーになったかどうか
	// 戻り値：const bool	死亡したならばTRUE
	//--------------------------------------------------------------------------------
	bool IsGameOver() const { return m_isGameOver; };

	//--------------------------------------------------------------------------------
	// プレイヤーが死亡したかどうか
	// 戻り値：const bool	死亡したならばTRUE
	//--------------------------------------------------------------------------------
	bool IsPlayerDeath() const { return m_isPlayerDeath; };

	//--------------------------------------------------------------------------------
	// 次のステージに行くフェードイン終了
	// 引　数：const bool	フェードイン終了
	//--------------------------------------------------------------------------------
	bool IsStartFade() const { return m_isStartFade; };

	//--------------------------------------------------------------------------------
	// 現在のステージを取得
	// 戻り値：const UINT	現在のステージ
	//--------------------------------------------------------------------------------
	UINT GetNowStage() const { return m_nowStage; };

private:

	//--------------------------------------------------------------------------------
	// フェード管理
	// 引　数：CSystem*			システムクラスのポインタ
	// 　　　　CFieldManager*	フィールド管理クラスのポインタ
	// 　　　　CFadeAni*		フェード管理クラスのポインタ
	//--------------------------------------------------------------------------------
	void UpdateFadeAnimation(CSystem* pSystem, CFieldManager* pField, CFadeAni* pFade);

	//--------------------------------------------------------------------------------
	// ステージクリア判定
	//--------------------------------------------------------------------------------
	void StageClearDecision();

	//--------------------------------------------------------------------------------
	// 敵の追加
	// 引　数：CSystem*		システムクラスのポインタ
	// 　　　　CAIManager*	敵管理クラスのポインタ
	// 　　　　CFadeAni*	フェード管理クラスのポインタ
	//--------------------------------------------------------------------------------
	void AddStartEnemy(CSystem* pSystem, CAIManager* pAI, CFadeAni* pFade);

	//--------------------------------------------------------------------------------
	// ボスの出現
	// 引　数：CSystem*	システムクラスのポインタ
	// 　　　　CAIManager*	敵管理クラスのポインタ
	// 　　　　CFadeAni*	フェード管理クラスのポインタ
	//--------------------------------------------------------------------------------
	void AddSpawnBoss(CSystem* pSystem, CAIManager* pAI, CFadeAni* pFade);

	//--------------------------------------------------------------------------------
	// 敵討伐クリア条件
	// 引　数：CAIManager*	敵管理クラスのポインタ
	//--------------------------------------------------------------------------------
	void EnemyExpeditionClearCriteria(CAIManager* pAI);

	//--------------------------------------------------------------------------------
	// ボス討伐クリア条件
	// 引　数：CAIManager*	敵管理クラスのポインタ
	//--------------------------------------------------------------------------------
	void BossExpeditionClearCriteria(CAIManager* pAI);

	//--------------------------------------------------------------------------------
	// プレイヤーの死亡状況
	// 引　数：CPlayer*			プレイヤークラスのポインタ
	//--------------------------------------------------------------------------------
	void PlayerDeathStatus(CPlayer* pPlayer, CFadeAni* pFade);

	//--------------------------------------------------------------------------------
	// BGM管理
	// 引　数：CSystem*	システムクラスのポインタ
	//--------------------------------------------------------------------------------
	void SoundManager(CSystem* pSystem);

	//--------------------------------------------------------------------------------
	// ステージによるBgm選択
	// 引　数：CSystem*	システムクラスのポインタ
	// 　　　　const int 読み込んだBgm番号
	//--------------------------------------------------------------------------------
	void StageSoundSelecter(CSystem* pSystem, const int index);

	//--------------------------------------------------------------------------------
	// パラメータの取得
	// 引　数：const string ファイル名
	//--------------------------------------------------------------------------------
	void LoadParams(const string strFileName);

	//--------------------------------------------------------------------------------
	// パラメータの保存
	// 引　数：const string ファイル名
	//--------------------------------------------------------------------------------
	void InitParams(const string strFileName);

	enum Stage
	{
		ST_FIELD_NONE,
		ST_FIELD_1,
		ST_FIELD_2,
		ST_FIELD_3,
		ST_FIELD_MAX,
	};


	//現在のステージ
	UINT m_nowStage;
	UINT m_maxStage;

	//フェードモード
	bool m_isNowFade;

	bool m_isGameClear;
	bool m_isStageClear;
	bool m_isGameOver;
	bool m_isAddedBoss;
	bool m_isAddedEnemy;
	bool m_isPlayerDeath;
	bool m_isStartFade;

	bool m_enableFadeStart;

	int m_nowPlayBgm;
	int m_addStartEnemyNum;
};