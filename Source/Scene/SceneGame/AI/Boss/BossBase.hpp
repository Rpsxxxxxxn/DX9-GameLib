//********************************************************************************
//
// BossBase.hpp
//
// ボスオブジェクトの基底クラス
//
// Date: 2019/10/06 更新
//
//********************************************************************************

#pragma once

//================================================================================
// インクルード
//================================================================================
#include "../../../GameManager/GameManager.h"
#include "../../Hud/Damage/Damage.hpp"

//================================================================================
// クラス定義
//================================================================================
class CBossBase : public CGameObject
{
public:

	//--------------------------------------------------------------------------------
	// コンストラクタ
	//--------------------------------------------------------------------------------
	CBossBase();

	//--------------------------------------------------------------------------------
	// デストラクタ
	//--------------------------------------------------------------------------------
	~CBossBase();

	//--------------------------------------------------------------------------------
	// 初期化
	// 引　数：CSystem*	システムクラスのポインタ
	//--------------------------------------------------------------------------------
	virtual void Initialize(CSystem* pSystem) = 0;

	//--------------------------------------------------------------------------------
	// 更新
	// 引　数：CSystem*	システムクラスのポインタ
	// 　　　　CPlayer*	プレイヤークラスのポインタ
	//--------------------------------------------------------------------------------
	virtual void Update(CSystem* pSystem, CPlayer* pPlayer);

	//--------------------------------------------------------------------------------
	// 描画
	// 引　数：CSystem*	システムクラスのポインタ
	//--------------------------------------------------------------------------------
	void ZDraw(CSystem* pSystem);

	//--------------------------------------------------------------------------------
	// 描画
	// 引　数：CSystem*	システムクラスのポインタ
	//--------------------------------------------------------------------------------
	void Draw(CSystem* pSystem);

	//--------------------------------------------------------------------------------
	// ヒットした時HPを減らす
	// 引　数：CSystem*		システムクラスのポインタ
	// 　　　　CShowDamage*	ダメージ表示クラスのポインタ
	// 　　　　const float	攻撃力
	//--------------------------------------------------------------------------------
	void SetHitPlayerAttack(CSystem* pSystem, CShowDamage* pDamage, const float atk);

	//--------------------------------------------------------------------------------
	// プレイヤー攻撃アニメーションが終了した時
	//--------------------------------------------------------------------------------
	void SetHitReset();

	//--------------------------------------------------------------------------------
	// プレイヤーへの攻撃が当たったとき
	// 備　考：これは一度きりの攻撃をさせることをする
	//--------------------------------------------------------------------------------
	void SetPlayerHit();

	//--------------------------------------------------------------------------------
	// 現在の攻撃アニメーション状況
	// 戻り値：const bool	攻撃アニメーションが有効かどうか
	//--------------------------------------------------------------------------------
	bool IsAttackAni() const { return m_isAttackFlg; };

	//--------------------------------------------------------------------------------
	// 体の当たり判定
	// 戻り値：CBoundingBox*	バウンディングボックス
	//--------------------------------------------------------------------------------
	CBoundingBox* GetBodyBox() const { return m_pBodyBox; };

	//--------------------------------------------------------------------------------
	// 攻撃用当たり判定
	// 戻り値：CBoundingBox*	バウンディングボックス
	//--------------------------------------------------------------------------------
	CBoundingBox* GetAttackBox() const { return m_pAttackBox; };

	//--------------------------------------------------------------------------------
	// レイの取得
	// 戻り値：const CRay		レイクラス
	//--------------------------------------------------------------------------------
	CRay* GetRay() const { return m_pRay; };

	//--------------------------------------------------------------------------------
	// 攻撃力の取得
	// 戻り値：const float		攻撃力
	//--------------------------------------------------------------------------------
	float GetAtk() const { return m_atk; };

	//--------------------------------------------------------------------------------
	// 体力の取得
	// 戻り値：const float		体力
	//--------------------------------------------------------------------------------
	float GetHp() const { return m_hp; };

protected:

	//--------------------------------------------------------------------------------
	// 死亡状況の更新
	//--------------------------------------------------------------------------------
	void UpdateDeath();

	//--------------------------------------------------------------------------------
	// 前方向の更新
	// 引　数：const Vector3	前方向ベクトル
	//--------------------------------------------------------------------------------
	void UpdateForward(const Vector3 vecForward);

	//--------------------------------------------------------------------------------
	// モデルの設定
	// 引　数：CSystem*		システムクラスのポインタ
	// 　　　　const int	登録したモデルクラスの番号
	//--------------------------------------------------------------------------------
	void SetModel(CSystem* pSystem, const int fileConst);

	//--------------------------------------------------------------------------------
	// 攻撃のバウンディングボックス設定
	// 引　数：const string モデルのボーン名
	//--------------------------------------------------------------------------------
	void SetAttackBox(const string strBoneName);

	//--------------------------------------------------------------------------------
	// パラメータの取得
	// 引　数：const string ファイル名
	//--------------------------------------------------------------------------------
	void LoadParams(const string strFileName);

	//--------------------------------------------------------------------------------
	// パラメータの保存
	// 引　数：const string ファイル名
	//--------------------------------------------------------------------------------
	void InitParams(const string strFileName);

	CIntervalTimer m_timer;
	CXFileModel* m_pModel;
	CBoundingBox* m_pBodyBox;
	CBoundingBox* m_pAttackBox;
	CRay* m_pRay;

	Vector3 m_vecForward;

	UINT m_nowAnimation;

	double m_attackStartTime;
	double m_deathStartTime;
	double m_attackTimer;
	double m_attackInterval;

	float m_hp;
	float m_atk;
	float m_walkSpeed;
	float m_longDist;
	float m_intermediateDist;
	float m_shortDist;
	float m_rotateSpd;
	float m_distance;

	bool m_isDeath;
	bool m_isHit;
	bool m_isHitPlayer;
	bool m_isAttackFlg;
	bool m_isNowAttack;
	bool m_isDiscovery;
};