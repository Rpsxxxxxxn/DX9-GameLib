//********************************************************************************
//
// CGolem.hpp
//
// ゴーレム
//
// Date: 2019/09/23 更新
//
//********************************************************************************

#pragma once

//================================================================================
// インクルード
//================================================================================
#include "../../../../GameManager/GameManager.h"
#include "../../../Player/Player.hpp"
#include "../EnemyBase.hpp"

//================================================================================
// クラス定義
//================================================================================
class CGolem : public CEnemyBase
{
public:

	//--------------------------------------------------------------------------------
	// コンストラクタ
	//--------------------------------------------------------------------------------
	CGolem();

	//--------------------------------------------------------------------------------
	// デストラクタ
	//--------------------------------------------------------------------------------
	~CGolem();

	//--------------------------------------------------------------------------------
	// 初期化
	// 引　数：CSystem*	システムクラスのポインタ
	//--------------------------------------------------------------------------------
	void Initialize(CSystem* pSystem);

	//--------------------------------------------------------------------------------
	// 更新
	// 引　数：CSystem*	システムクラスのポインタ
	//--------------------------------------------------------------------------------
	void Update(CSystem* pSystem, CPlayer* pPlayer);

private:

	//--------------------------------------------------------------------------------
	// 敵の操作
	//--------------------------------------------------------------------------------
	void UpdateController(CSystem* pSystem, CPlayer* pPlayer);

	//--------------------------------------------------------------------------------
	// プレイヤーが範囲内に入っているか検索
	//--------------------------------------------------------------------------------
	void UpdateDiscovery(CPlayer* pPlayer);

	//--------------------------------------------------------------------------------
	// 自由に歩く
	//--------------------------------------------------------------------------------
	void UpdateFreeWalk();

	//--------------------------------------------------------------------------------
	// 歩く
	// 引　数：const float	近距離限界
	//--------------------------------------------------------------------------------
	void UpdateMove(const float distance);

	//--------------------------------------------------------------------------------
	// 回転
	// 引　数：Vector3&	ターゲットとなる位置ベクトル
	//--------------------------------------------------------------------------------
	void UpdateRotate(Vector3& vecPos);

	//--------------------------------------------------------------------------------
	// 死後のメッシュ透過
	//--------------------------------------------------------------------------------
	void UpdateMeshAlpha();

	//--------------------------------------------------------------------------------
	// 動作速度の更新
	//--------------------------------------------------------------------------------
	void UpdateMoveSpeed();

	//--------------------------------------------------------------------------------
	// アニメーション更新
	//--------------------------------------------------------------------------------
	void ModelRotate(const Vector3& pCross);

	//--------------------------------------------------------------------------------
	// 攻撃距離
	//--------------------------------------------------------------------------------
	void AttackDistance();

	//--------------------------------------------------------------------------------
	// ランダム攻撃
	//--------------------------------------------------------------------------------
	void RandomAttack(CSystem* pSystem);

	//--------------------------------------------------------------------------------
	// 攻撃を開始する
	//--------------------------------------------------------------------------------
	void StartAttack();

	//--------------------------------------------------------------------------------
	// 攻撃中の処理
	//--------------------------------------------------------------------------------
	void NowAttack();

	//--------------------------------------------------------------------------------
	// 死亡する
	//--------------------------------------------------------------------------------
	void UpdateDeath(CSystem* pSystem);

	//--------------------------------------------------------------------------------
	// アニメーション更新
	//--------------------------------------------------------------------------------
	void UpdateAnimation();

	enum Animation
	{
		IDLE,
		WALK,
		ATTACK1,
		ATTACK2,
		DEATH,
	};

	bool m_isAttackDist;
	bool m_isDeathAlpha;
	float m_speed;
};
