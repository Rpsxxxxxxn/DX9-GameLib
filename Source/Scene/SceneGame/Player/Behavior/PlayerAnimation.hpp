//********************************************************************************
//
// PlayerAnimation.hpp
//
// プレイヤーアニメーションのクラス
//
// Date: 2019/10/01 更新
//
//********************************************************************************

#pragma once

//================================================================================
// インクルード
//================================================================================
#include "../../../GameManager/GameManager.h"

namespace PlayerAnimation
{
	// プレイヤー行動列挙体
	enum class Action
	{
		IDLE,
		WALK,
		DASH,
		ATTACK,
		GUARD,
		POWERUP,
		DEATH,
		STEALTH,
		STEALTHWALK,
	};

	enum Animation
	{
		IDLE,
		WALK,
		DASH,
		ATTACK1,
		ATTACK2,
		ATTACK3,
		GUARD,
		POWERUP,
		DEATH,
		ATTACK4,
		ATTACK5,
		STEALTH,
		STEALTHWALK,
	};
}

//================================================================================
// クラス定義
//================================================================================
class CPlayerAnimation
{
public:
	//--------------------------------------------------------------------------------
	// コンストラクタ
	// 引　数：CXFileModel*	モデルクラスのポインタ
	//--------------------------------------------------------------------------------
	CPlayerAnimation(CXFileModel* pModel);

	//--------------------------------------------------------------------------------
	// デストラクタ
	//--------------------------------------------------------------------------------
	~CPlayerAnimation();

	//--------------------------------------------------------------------------------
	// 更新
	//--------------------------------------------------------------------------------
	void Update();

	//--------------------------------------------------------------------------------
	// 死亡割込み処理
	//--------------------------------------------------------------------------------
	void SetDeath();

	//--------------------------------------------------------------------------------
	// 現在のアニメーション変更
	// 引　数：PlayerAnimation::Action	アクション列挙体
	//--------------------------------------------------------------------------------
	void SetChangeAni(PlayerAnimation::Action action);

	//--------------------------------------------------------------------------------
	// プレイヤー攻撃アニメーション中
	// 戻り値：const bool	アニメーション中
	//--------------------------------------------------------------------------------
	bool IsNowAttack() const { return m_isNowAttack; };

	//--------------------------------------------------------------------------------
	// 死亡アニメーション終了
	// 戻り値：const bool	死亡
	//--------------------------------------------------------------------------------
	bool IsDeath() const { return m_isDeath; };

	//--------------------------------------------------------------------------------
	// アニメーションロック状況の取得
	// 戻り値：const bool	アニメーションロック
	//--------------------------------------------------------------------------------
	bool IsLockAni() const { return m_isLockAni; };

private:

	//--------------------------------------------------------------------------------
	// アニメーション変更の更新
	//--------------------------------------------------------------------------------
	void UpdateChangeAni();

	//--------------------------------------------------------------------------------
	// アニメーションの更新
	//--------------------------------------------------------------------------------
	void UpdateAni();

	//--------------------------------------------------------------------------------
	// 攻撃処理
	//--------------------------------------------------------------------------------
	void StartAttack();

	//--------------------------------------------------------------------------------
	// ガード処理
	//--------------------------------------------------------------------------------
	void StartGuard();

	//--------------------------------------------------------------------------------
	// 攻撃中の処理
	//--------------------------------------------------------------------------------
	void NowAttack();

	//--------------------------------------------------------------------------------
	// ガード中の処理
	//--------------------------------------------------------------------------------
	void NowGuard();

	//--------------------------------------------------------------------------------
	// 死亡中の処理
	//--------------------------------------------------------------------------------
	void NowDeath();

	PlayerAnimation::Action m_nowAction;
	PlayerAnimation::Action m_newAction;
	PlayerAnimation::Animation m_nowAni;

	CXFileModel* m_pModel;
	
	double m_attackStartTime;
	double m_guardStartTime;
	double m_deathStartTime;

	int m_nowAttackCnt;

	bool m_isLockAni;
	bool m_isDeathLock;
	bool m_enableAttack;
	bool m_enableGuard;
	bool m_enableDeath;

	bool m_isNowAttack;
	bool m_isDeath;
};