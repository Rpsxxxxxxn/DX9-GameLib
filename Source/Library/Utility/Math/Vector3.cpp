//*************************************************************
//
// Vector3.cpp
//
//*************************************************************

//=============================================================
// インクルード
//=============================================================
#include "Vector3.h"

// ユーティリティ ---------------------------------------------
namespace Utility
{
	Vector3::Vector3()
		: x(0.0f), y(0.0f), z(0.0f) {};
	Vector3::Vector3(float v)
		: x(v), y(v), z(v) {};
	Vector3::Vector3(float _x, float _y, float _z)
		: x(_x), y(_y), z(_z) {};
	Vector3::~Vector3() {}

	//-------------------------------------------------------------
	// 定数
	//-------------------------------------------------------------
	const Vector3 Vector3::Zero		= Vector3(0.0f);
	const Vector3 Vector3::One		= Vector3(1.0f);
	const Vector3 Vector3::Up		= Vector3(0.0f, 1.0f, 0.0f);
	const Vector3 Vector3::Down		= Vector3(0.0f, -1.0f, 0.0f);
	const Vector3 Vector3::Left		= Vector3(-1.0f, 0.0f, 0.0f);
	const Vector3 Vector3::Right	= Vector3(1.0f, 0.0f, 0.0f);
	const Vector3 Vector3::Forward	= Vector3(0.0f, 0.0f, 1.0f);
	const Vector3 Vector3::Back		= Vector3(0.0f, 0.0f, -1.0f);

	//-------------------------------------------------------------
	// +
	//-------------------------------------------------------------
	Vector3 Vector3::operator+(const Vector3 v)
	{
		return Vector3(x + v.x, y + v.y, z + v.z);
	};

	//-------------------------------------------------------------
	// +
	//-------------------------------------------------------------
	Vector3 Vector3::operator+(const float v)
	{
		return  Vector3(x + v, y + v, z + v);
	};

	//-------------------------------------------------------------
	// -
	//-------------------------------------------------------------
	Vector3 Vector3::operator-(const Vector3 v)
	{
		return Vector3(x - v.x, y - v.y, z - v.z);
	};

	//-------------------------------------------------------------
	// -
	//-------------------------------------------------------------
	Vector3 Vector3::operator-(const float v)
	{
		return  Vector3(x - v, y - v, z - v);
	};

	//-------------------------------------------------------------
	// *
	//-------------------------------------------------------------
	Vector3 Vector3::operator*(const Vector3 v)
	{
		return Vector3(x * v.x, y * v.y, z * v.z);
	};

	//-------------------------------------------------------------
	// *
	//-------------------------------------------------------------
	Vector3 Vector3::operator*(const float v)
	{
		return  Vector3(x * v, y * v, z * v);
	};

	//-------------------------------------------------------------
	// /
	//-------------------------------------------------------------
	Vector3 Vector3::operator/(const Vector3 v)
	{
		return Vector3(x / v.x, y / v.y, z / v.z);
	};

	//-------------------------------------------------------------
	// /
	//-------------------------------------------------------------
	Vector3 Vector3::operator/(const float v)
	{
		return  Vector3(x / v, y / v, z / v);
	};

	//-------------------------------------------------------------
	// +=
	//-------------------------------------------------------------
	Vector3& Vector3::operator+=(const Vector3 v)
	{
		x += v.x;
		y += v.y;
		z += v.z;
		return *this;
	}

	//-------------------------------------------------------------
	// +=
	//-------------------------------------------------------------
	Vector3& Vector3::operator+=(const float v)
	{
		x += v;
		y += v;
		z += v;
		return *this;
	}

	//-------------------------------------------------------------
	// -=
	//-------------------------------------------------------------
	Vector3& Vector3::operator-=(const Vector3 v)
	{
		x -= v.x;
		y -= v.y;
		z -= v.z;
		return *this;
	}

	//-------------------------------------------------------------
	// -=
	//-------------------------------------------------------------
	Vector3& Vector3::operator-=(const float v)
	{
		x -= v;
		y -= v;
		z -= v;
		return *this;
	}

	//-------------------------------------------------------------
	// *=
	//-------------------------------------------------------------
	Vector3& Vector3::operator*=(const Vector3 v)
	{
		x *= v.x;
		y *= v.y;
		z *= v.z;
		return *this;
	};

	//-------------------------------------------------------------
	// *=
	//-------------------------------------------------------------
	Vector3& Vector3::operator*=(const float v)
	{
		x *= v;
		y *= v;
		z *= v;
		return *this;
	};

	//-------------------------------------------------------------
	// /=
	//-------------------------------------------------------------
	Vector3& Vector3::operator/=(const Vector3 v)
	{
		x /= v.x;
		y /= v.y;
		z /= v.z;
		return *this;
	}

	//-------------------------------------------------------------
	// /=
	//-------------------------------------------------------------
	Vector3& Vector3::operator/=(const float v)
	{
		x /= v;
		y /= v;
		z /= v;
		return *this;
	}

	//-------------------------------------------------------------
	// ==
	//-------------------------------------------------------------
	bool Vector3::operator==(const Vector3& v)
	{
		return x == v.x && y == v.y && z == v.z;
	}

	//-------------------------------------------------------------
	// 1=
	//-------------------------------------------------------------
	bool Vector3::operator!=(const Vector3& v)
	{
		return !(*this == v);
	}

	//-------------------------------------------------------------
	// NULLかどうかを判断
	//-------------------------------------------------------------
	bool Vector3::IsNull()
	{
		return (x == 0. && y == 0. && z == 0.);
	}

	//-------------------------------------------------------------
	// 長さ
	//-------------------------------------------------------------
	float Vector3::Magnitude()
	{
		return sqrtf(x * x + y * y + z * z);
	};

	//-------------------------------------------------------------
	// 長さ
	//-------------------------------------------------------------
	float Vector3::SquareMagnitude()
	{
		return (x * x + y * y + z * z);
	};

	//-------------------------------------------------------------
	// 正規化
	//-------------------------------------------------------------
	Vector3 Vector3::Normalized()
	{
		auto magnitude = Magnitude();
		if (magnitude <= 0) return Vector3::Zero;
		return *this / magnitude;
	};

	//-------------------------------------------------------------
	// 正規化
	//-------------------------------------------------------------
	void Vector3::Normalize()
	{
		*this = Normalized();
	};

	//-------------------------------------------------------------
	// 内積
	//-------------------------------------------------------------
	float Vector3::Dot(const Vector3& v)
	{
		return x * v.x + y * v.y + z * v.z;
	}

	//-------------------------------------------------------------
	// 外積
	//-------------------------------------------------------------
	Vector3 Vector3::Cross(const Vector3& v)
	{
		return Vector3(
			y * v.z - z * v.y,
			z * v.x - x * v.z,
			x * v.y - y * v.x);
	};

	//-------------------------------------------------------------
	// ランダム
	//-------------------------------------------------------------
	Vector3 Vector3::Random()
	{
		std::random_device rd;
		std::mt19937 mt(rd());
		return Vector3(
			(float)mt(), 
			(float)mt(),
			(float)mt());
	}

	//-------------------------------------------------------------
	// ランダム
	//-------------------------------------------------------------
	Vector3 Vector3::Random(const float min, const float max)
	{
		std::random_device rd;
		std::mt19937 mt(rd());
		std::uniform_real_distribution<float> rand(min, max);
		return Vector3(rand(mt), rand(mt), rand(mt));
	}
}