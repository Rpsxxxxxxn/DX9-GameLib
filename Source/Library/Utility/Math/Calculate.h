//*************************************************************
//
// Calculate.h
//
// 計算用クラス
//
// Date: 2019/07/30 更新
//
//*************************************************************

#pragma once

//=============================================================
// インクルード
//=============================================================
#include "../../Common.h"

class Calculate
{
public:
	//-------------------------------------------------------------
	// ワールド座標からスクリーン座標に変換
	// 引　数：LPDIRECT3DDEVICE9 デバイスのポインタ
	// 　　　：Matrix			 ビュー行列
	// 　　　：Matrix			 プロジェクション行列
	// 　　　：Vector3			 変換元3次元ベクトル
	// 戻り値：変換後の3次元ベクトル(X,Yに数値が入り、ZにはXが入ります。)
	//-------------------------------------------------------------
	static Vector3 WorldToScreen(
		LPDIRECT3DDEVICE9 pDevice,
		const D3DXMATRIX* mView,
		const D3DXMATRIX* mProj,
		const Vector3* vFrom);

	//-------------------------------------------------------------
	// イージング関数
	// 引　数：double 現在の経過時間
	// 　　　：double 最大時間
	// 　　　：double 最終位置
	// 　　　：double 初期位置
	// 戻り値：経過時間の位置
	//-------------------------------------------------------------
	static double OutQuart(
		double time,
		double totaltime,
		double max,
		double min);

	//-------------------------------------------------------------
	// イージング関数
	// 引　数：double 現在の経過時間
	// 　　　：double 最大時間
	// 　　　：double 最終位置
	// 　　　：double 初期位置
	// 戻り値：経過時間の位置
	//-------------------------------------------------------------
	static double InQubic(
		double time,
		double totaltime,
		double max,
		double min);

	//-------------------------------------------------------------
	// 範囲の中で現在の進行度を算出します。
	// 引　数：const float	表示先の横幅
	// 　　　：const float	計算元の最大数値
	// 　　　：const float	現在の数値
	//-------------------------------------------------------------
	static float ProgressBar(
		const float width,
		const float maxValue,
		const float nowValue);

	//-------------------------------------------------------------
	// 移動
	//-------------------------------------------------------------
	static void MoveAngle(
		Vector3* pVecPos,
		float fAngle,
		float fSpeed);

	//-------------------------------------------------------------
	// アングル調整180度
	// 引　数：float 角度
	// 戻り値：float 調整後の角度
	//-------------------------------------------------------------
	static float PI180(float fAngle);

	//-------------------------------------------------------------
	// アングル調整360度
	// 引　数：float 角度
	// 戻り値：float 調整後の角度
	//-------------------------------------------------------------
	static float PI360(float fAngle);

	//-------------------------------------------------------------
	// 線形補間回転
	//-------------------------------------------------------------
	static void LerpRot(float from, float speed, float* angle);

	//-------------------------------------------------------------
	// ランダム 幅指定 (メルセンヌ・ツイスタ)
	// 引　数：int 最小
	// 　　　：int 最大
	// 戻り値：int ランダム数値
	//-------------------------------------------------------------
	static int Random(int min, int max);

	//-------------------------------------------------------------
	// ランダム 幅指定 (メルセンヌ・ツイスタ)
	// 引　数：float 最小
	// 　　　：float 最大
	// 戻り値：float ランダム数値
	//-------------------------------------------------------------
	static float Random(float min, float max);
};