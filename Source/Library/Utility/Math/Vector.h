//*************************************************************
//
// Vector.hpp
//
// ベクトルクラス
//
// Date: 2019/07/30 更新
//
//*************************************************************

#pragma once

//=============================================================
// インクルード
//=============================================================
#include "../../Common.h"

class VectorCalculate
{
public:

	//-------------------------------------------------------------
	// 内積の取得
	// 引　数：Vector3	1つ目のベクトル
	// 　　　：Vector3	2つ目のベクトル
	// 戻り値：float	内積
	//-------------------------------------------------------------
	static float Dot(Vector3 v1, Vector3 v2);

	//-------------------------------------------------------------
	// 外積の取得
	// 引　数：Vector3 １つ目のベクトル
	// 　　　：Vector3 ２つ目のベクトル
	// 戻り値：Vector3 外積
	//-------------------------------------------------------------
	static Vector3 Cross(Vector3 v1, Vector3 v2);

	//-------------------------------------------------------------
	// ２点の距離を引く
	// 引　数：Vector2 １つ目のベクトル
	// 　　　：Vector2 ２つ目のベクトル
	// 戻り値：Vector2   ２点の距離を引く
	//-------------------------------------------------------------
	static Vector2 Subtract(Vector2 v1, Vector2 v2);

	//-------------------------------------------------------------
	// ２点の距離を引く
	// 引　数：Vector3 １つ目のベクトル
	// 　　　：Vector3 ２つ目のベクトル
	// 戻り値：Vector3   ２点の距離を引く
	//-------------------------------------------------------------
	static Vector3 Subtract(Vector3 v1, Vector3 v2);

	//-------------------------------------------------------------
	// 長さの取得
	// 引　数：Vector2 １つ目のベクトル
	// 　　　：Vector2 ２つ目のベクトル
	// 戻り値：float   長さ
	//-------------------------------------------------------------
	static float Length(Vector2 v1, Vector2 v2);

	//-------------------------------------------------------------
	// 長さの取得
	// 引　数：Vector3 １つ目のベクトル
	// 　　　：Vector3 ２つ目のベクトル
	// 戻り値：float   長さ
	//-------------------------------------------------------------
	static float Length(Vector3 v1, Vector3 v2);

	//-------------------------------------------------------------
	// minとmaxの間にする
	// 引　数：float 数値
	// 　　　：float 最小
	// 　　　：float 最大
	// 戻り値：float minとmaxの間
	//-------------------------------------------------------------
	static float Clamp(float val, float min, float max);

	//-------------------------------------------------------------
	// minとmaxの間にする
	// 引　数：Vector2 数値
	// 　　　：Vector2 最小
	// 　　　：Vector2 最大
	// 戻り値：Vector2 minとmaxの間
	//-------------------------------------------------------------
	static Vector2 Clamp(Vector2 val, Vector2 vMin, Vector2 vMax);

	//-------------------------------------------------------------
	// minとmaxの間にする
	// 引　数：Vector3 数値
	// 　　　：Vector3 最小
	// 　　　：Vector3 最大
	// 戻り値：Vector3 minとmaxの間
	//-------------------------------------------------------------
	static Vector3 Clamp(Vector3 val, Vector3 vMin, Vector3 vMax);

	//-------------------------------------------------------------
	// 二つのベクトルを足す
	// 引　数：Vector2 一つ目
	// 　　　：Vector2 二つ目
	// 戻り値：Vector2 二つを足す
	//-------------------------------------------------------------
	static Vector2 Add(Vector2 v1, Vector2 v2);

	//-------------------------------------------------------------
	// 二つのベクトルを足す
	// 引　数：Vector3 一つ目
	// 　　　：Vector3 二つ目
	// 戻り値：Vector3 二つを足す
	//-------------------------------------------------------------
	static Vector3 Add(Vector3 v1, Vector3 v2);

	//-------------------------------------------------------------
	// ベクトルを正規化
	// 引　数：Vector3 一つ目
	// 　　　：Vector3 二つ目
	// 戻り値：Vector3 二つを足す
	//-------------------------------------------------------------
	static Vector3 Normalize(Vector3 v);

	//-------------------------------------------------------------
	// ベクトルの長さ計算
	// 引　数：Vector3	平方根
	// 戻り値：float	長さを取得
	//-------------------------------------------------------------
	static float Magnitude(const Vector2 value);

	//-------------------------------------------------------------
	// ベクトルの長さ計算
	// 引　数：const Vector3	平方根
	// 戻り値：float			長さを取得
	//-------------------------------------------------------------
	static float Magnitude(const Vector3 value);

	//-------------------------------------------------------------
	// 線形補間(FLOAT)
	// 引　数：const float	現在の数値
	// 　　　　const float	目標の数値
	// 　　　　const float	遷移速度
	// 戻り値：float		現在と目標の間の速度で掛けた数値
	//-------------------------------------------------------------
	static float Lerp(const float f1, const float f2, const float t);

	//-------------------------------------------------------------
	// 線形補間(Vector2)
	// 引　数：const Vector2	現在の数値
	// 　　　　const Vector2	目標の数値
	// 　　　　const Vector2	遷移速度
	// 戻り値：Vector2			現在と目標の間の速度で掛けた数値
	//-------------------------------------------------------------
	static Vector2 Lerp(const Vector2 f1, const Vector2 f2, const float t);

	//-------------------------------------------------------------
	// 線形補間(Vector3)
	// 引　数：const Vector3	現在の数値
	// 　　　　const Vector3	目標の数値
	// 　　　　const Vector3	遷移速度
	// 戻り値：float			現在と目標の間の速度で掛けた数値
	//-------------------------------------------------------------
	static Vector3 Lerp(const Vector3 f1, const Vector3 f2, const float t);

	static const Vector3 Zero;
	static const Vector3 One;
};