//*************************************************************
//
// SpriteValue.h
//
// 数値の描画
//
// Date: 2019/07/30 更新
//
//*************************************************************

#pragma once

//=============================================================
// インクルード
//=============================================================
#include "../../System/FileLoader/Texture/Texture.h"
#include "../../System/System.h"
#include "SpriteAnimation.h"
#include "ISprite.h"

//=============================================================
// クラス定義
//=============================================================
class CSpriteValue : public ISprite
{
public:

	//-------------------------------------------------------------
	// コンストラクタ
	// 引　数：std::string	ディレクトリ
	//-------------------------------------------------------------
	CSpriteValue(TEXTURE_DATA* pTextureData);

	//-------------------------------------------------------------
	// デストラクタ
	//-------------------------------------------------------------
	~CSpriteValue();

	//-------------------------------------------------------------
	// 描画
	// 引　数：Engine*	エンジンクラスのポインタ
	//-------------------------------------------------------------
	void Draw(CSystem* pSystem);

	//-------------------------------------------------------------
	// 描画する数値の設定
	// 引　数：const int 数値
	//-------------------------------------------------------------
	void SetValue(const int value);

	//-------------------------------------------------------------
	// 位置の設定
	// 引　数：const Vector2	3次元ベクトルの位置
	//-------------------------------------------------------------
	void SetPosition(const Vector2 vecPos);

	//-------------------------------------------------------------
	// 透明度の設定
	// 引　数：const int	透明度(０　〜　２５５)
	//-------------------------------------------------------------
	void SetAlpha(const int alpha);

	//-------------------------------------------------------------
	// 回転角度の設定
	// 引　数：const float	ラジアン角
	//-------------------------------------------------------------
	void SetAngle(const float angle);

	//-------------------------------------------------------------
	// 大きさの設定
	// 引　数：const UINT	横幅のUINT
	// 　　　　const UINT	縦幅のUINT
	//-------------------------------------------------------------
	void SetSize(const UINT width, const UINT height);

	//-------------------------------------------------------------
	// 位置の設定
	// 引　数：const Vector2	3次元ベクトルの位置
	// 備　考：アニメーション使用時に利用
	//-------------------------------------------------------------
	void SetNewPosition(const Vector2 vecPos);

	//-------------------------------------------------------------
	// 透明度の設定
	// 引　数：const int	透明度(０　〜　２５５)
	// 備　考：アニメーション使用時に利用
	//-------------------------------------------------------------
	void SetNewAlpha(const int alpha);

	//-------------------------------------------------------------
	// 回転角度の設定
	// 引　数：const float	ラジアン角
	// 備　考：アニメーション使用時に利用
	//-------------------------------------------------------------
	void SetNewAngle(const float angle);

	//-------------------------------------------------------------
	// 大きさの設定
	// 引　数：const UINT	横幅のUINT
	// 　　　　const UINT	縦幅のUINT
	// 備　考：アニメーション使用時に利用
	//-------------------------------------------------------------
	void SetNewSize(const UINT width, const UINT height);

	//-------------------------------------------------------------
	// アニメーション終了時間
	// 引　数：const DWORD	終了時間(ms)
	// 備　考：msなので [1秒] -> [1000ms]
	//-------------------------------------------------------------
	void SetEndTime(const double time);

	//-------------------------------------------------------------
	// 生存時間終了確認
	// 戻り値：const bool	生存していなければTRUE
	//-------------------------------------------------------------
	bool IsDestroy() const;
private:
	//-------------------------------------------------------------
	// 桁の計算
	// 引　数：const int 数値
	//-------------------------------------------------------------
	BYTE CalcDigit(const int val);

	TEXTURE_DATA* m_pTexData;
	vector<CSpriteAnimation*> m_vecSprite;
	RECT m_rSour;
	BYTE m_num[10];
	BYTE m_nowDigit;
	BYTE m_oldDigit;
	BYTE m_alpha;
	Vector2 m_vecPos;
	Vector2 m_vecSize;
	double m_endTime;
	double m_elapsedTime;
	float m_angle;
	bool m_isDestroy;
};