//*************************************************************
//
// CollisionCheck.hpp
//
// 当たり判定確認クラス
//
// Date: 2019/07/30 更新
//
//*************************************************************

#pragma once

//=============================================================
// インクルード
//=============================================================
#include "Obb.h"
#include "Sphere.h"
#include "Ray.h"
#include "Mesh.h"

//=============================================================
// 前方宣言
//=============================================================
class CCamera;
class CGameObject;

//=============================================================
// クラス宣言
//=============================================================
class CCollisionCheck
{
public:

	//-------------------------------------------------------------
	// OBB同士の当たり判定
	// 引　数：CBoundingBox*	１つ目のバウンディングボックス
	// 　　　　CBoundingBox*　	２つ目のバウンディングボックス
	// 戻り値：当たっていればTRUE
	//-------------------------------------------------------------
	static bool IsObb(CBoundingBox* obb1, CBoundingBox* obb2);

	//-------------------------------------------------------------
	// SPHERE同士の当たり判定
	// 引　数：CSphere*	１つ目のバウンディングスフィア
	// 　　　　CSphere*	２つ目のバウンディングスフィア
	// 戻り値：当たっていればTRUE
	//-------------------------------------------------------------
	static bool IsSphere(CSphere* s1, CSphere* s2);

	//-------------------------------------------------------------
	// レイとフィールドの当たり判定
	// 引　数：CSphere*	１つ目のバウンディングスフィア
	// 　　　　CSphere*	２つ目のバウンディングスフィア
	//-------------------------------------------------------------
	static void IsField(CRay* p1, CMesh* p2);

	//-------------------------------------------------------------
	// 視推台カリング(スフィア)
	// 引　数：CCamera*		カメラクラスのポインタ
	// 　　　　CGameObject*	オブジェクトクラスのポインタ
	// 戻り値：当たっていればTRUE
	//-------------------------------------------------------------
	static bool IsFrustumAndSphere(CCamera* pCamera, CGameObject* pObj);

	//-------------------------------------------------------------
	// 視推台カリング(ボックス)
	// 引　数：CCamera*		カメラクラスのポインタ
	// 　　　　CGameObject*	オブジェクトクラスのポインタ
	// 戻り値：当たっていればTRUE
	//-------------------------------------------------------------
	static bool IsFrustumAndBox(CCamera* pCamera, CBoundingBox* pObb, CGameObject* pObj);

private:

	//-------------------------------------------------------------
	// RayとPolygonの交わる点を求める
	// 引　数：Vector3*		位置
	// 　　　：Vector3		Ray
	// 　　　：Vector3*		法線
	// 　　　：Vector3[3]	頂点配列
	//-------------------------------------------------------------
	static bool IntersectPoint(const Vector3* pPos, const Vector3& vRay, const Vector3* pNormal, const Vector3 vVtx[3], Vector3* pCrossP);

	//-------------------------------------------------------------
	// 再帰呼び出し用
	// 引　数：Vector3*		位置
	// 　　　：Vector3		隣接ポリゴン
	// 　　　：DWORD		ポリゴン番号
	//-------------------------------------------------------------
	static bool CallBackFieldIntersect(CRay* pRay, CMesh* pFrame, DWORD index, DWORD* pIndex);

	//-------------------------------------------------------------
	// OBBの投影距離比較
	//-------------------------------------------------------------
	static bool CompareLengthObb(const ObbData* o1, const ObbData* o2,const Vector3* vecSep, const Vector3* vecDist);

};