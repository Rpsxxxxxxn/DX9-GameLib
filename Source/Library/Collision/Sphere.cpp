//*************************************************************
//
// BSphere.cpp
//
// 当たり判定クラス(スフィア)
//
// Date: 2019/07/30 更新
//
//*************************************************************

//=============================================================
// インクルード
//=============================================================
#include "Sphere.h"

//-------------------------------------------------------------
// コンストラクタ
//-------------------------------------------------------------
CSphere::CSphere()
	: m_radius(0)
	, m_pMesh(nullptr)
{
	D3DXMatrixIdentity(&m_matWorld);
}

//-------------------------------------------------------------
// デストラクタ
//-------------------------------------------------------------
CSphere::~CSphere()
{
	if (m_pMesh != nullptr) 
		m_pMesh->Release();
}

//-------------------------------------------------------------
// 初期化
// 引　数：CSystem* pSystem		システムクラスのポインタ
// 　　　　const float			半径
// 　　　　const bool			デバッグ用描画
//-------------------------------------------------------------
void CSphere::Create(
	CSystem * pSystem, 
	const float radius, 
	const bool showDebug
)
{
	m_radius = radius;

	if (showDebug)
	{
		LPDIRECT3DDEVICE9 pDevice = pSystem->GetDevice();

		HRESULT hr = D3DXCreateSphere(
			pDevice,
			radius,
			24,
			24,
			&m_pMesh,
			nullptr);

		if (FAILED(hr)) 
			return;
	}
}

//-------------------------------------------------------------
// 描画
// 引　数：CSystem* pSystem		システムクラスのポインタ
//-------------------------------------------------------------
void CSphere::Draw(CSystem * pSystem)
{
	if (m_pMesh)
	{
		m_pMesh->DrawSubset(0);
	}
}

//-------------------------------------------------------------
// 世界行列の設定
// 引　数：const Matrix*		世界行列
//-------------------------------------------------------------
void CSphere::SetTransform(const Matrix * pMatWorld)
{
	m_matWorld = *pMatWorld;
}

//-------------------------------------------------------------
// 世界行列の取得
// 戻り値：const float			世界行列
//-------------------------------------------------------------
Matrix CSphere::GetTransform() const
{
	return m_matWorld;
}

//-------------------------------------------------------------
// 半径の取得
// 戻り値：const float			半径
//-------------------------------------------------------------
float CSphere::GetRadius() const
{
	return m_radius;
}
