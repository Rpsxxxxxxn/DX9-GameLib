//*************************************************************
//
// System.h
//
// フレームワークのメインシステム
//
// Date: 2019/07/30 更新
//
//*************************************************************

#pragma once

//=============================================================
// インクルード
//=============================================================
#include "../Common.h"
#include "../Application/Window.h"

#include "Shader/ShaderManager.h"
#include "FileLoader/FileManager.h"
#include "Rendering/RenderSystem.h"
#include "Input/Input.h"
#include "Sprite/Sprite.h"
#include "Timer/Timer.h"
#include "Audio/Audio.h"
#include "Effect/Effect.h"
#include "Debug/Debug.h"

//=============================================================
// クラス定義
//=============================================================
class CSystem
{
public:

	//-------------------------------------------------------------
	// コンストラクタ
	//-------------------------------------------------------------
	CSystem();

	//-------------------------------------------------------------
	// デストラクタ
	//-------------------------------------------------------------
	~CSystem();

	//-------------------------------------------------------------
	// 初期化
	// 引　数：CWindowSystem*	ウィンドウシステムクラスのポインタ
	//-------------------------------------------------------------
	void Initialize(CWindowSystem* pWindowSystem);

	//-------------------------------------------------------------
	// 更新
	//-------------------------------------------------------------
	void Update();

	//-------------------------------------------------------------
	// 解放
	//-------------------------------------------------------------
	void ShutDown();

	//*************************************************************
	//
	// ファイル管理
	//
	//*************************************************************

	//-------------------------------------------------------------
	// XFileファイル読み込み
	// 引　数：const int 	ファイルの固定番号
	// 　　　　const string	ファイル名
	//-------------------------------------------------------------
	void LoadXFile(const int index, const string strFileName);

	//-------------------------------------------------------------
	// Textureファイル読み込み
	// 引　数：const int 	ファイルの固定番号
	// 　　　　const string	ファイル名
	//-------------------------------------------------------------
	void LoadTexture(const int index, const string strFileName);

	//-------------------------------------------------------------
	// ファイルの解放
	//-------------------------------------------------------------
	void ReleaseAllFile();

	//-------------------------------------------------------------
	// ロードしたファイルの解放(省メモリ)
	// 引　数：const int 	ファイルの固定番号
	//-------------------------------------------------------------
	void EraseData(const int index);

	//-------------------------------------------------------------
	// テクスチャのポインタ取得
	// 戻り値：LPDIRECT3DTEXTURE9	テクスチャ
	//-------------------------------------------------------------
	LPDIRECT3DTEXTURE9 GetTexture(const int index);

	//-------------------------------------------------------------
	// テクスチャ構造体の取得
	// 戻り値：TEXTURE_DATA*		テクスチャ
	//-------------------------------------------------------------
	TEXTURE_DATA* GetTextureData(const int index);

	//-------------------------------------------------------------
	// XFileクラスのポインタ取得
	// 戻り値：CXFile*	XFileモデルクラス
	//-------------------------------------------------------------
	CXFile* GetXFile(const int index);

	//*************************************************************
	//
	// オーディオシステム
	//
	//*************************************************************

	//-------------------------------------------------------------
	// Bgmファイル読み込み
	// 引　数：const int 	ファイルの固定番号
	// 　　　　const string	ファイル名
	//-------------------------------------------------------------
	void AddBgm(const int index, const string strFileName);

	//-------------------------------------------------------------
	// Seファイル読み込み
	// 引　数：const int 	ファイルの固定番号
	// 　　　　const string	ファイル名
	//-------------------------------------------------------------
	void AddSe(const int index, const string strFileName);

	//-------------------------------------------------------------
	// Bgmの再生
	// 引　数：const string	追加した名前
	//-------------------------------------------------------------
	void PlayBgm(const int index);

	//-------------------------------------------------------------
	// Seの再生
	// 引　数：const string	追加した名前
	//-------------------------------------------------------------
	void PlaySe(const int index);

	//-------------------------------------------------------------
	// Bgmの停止
	// 引　数：const string	追加した名前
	//-------------------------------------------------------------
	void StopBgm(const int index);

	//-------------------------------------------------------------
	// 巻き戻し
	// 引　数：const string	追加したBgm名
	//-------------------------------------------------------------
	void RewindBgm(const int index);

	//-------------------------------------------------------------
	// ファイルの解放
	//-------------------------------------------------------------
	void ReleaseAllSound();

	//-------------------------------------------------------------
	// ボリュームの設定
	// 引　数：float	ボリュームの設定
	//-------------------------------------------------------------
	void SetVolume(float volume);

	//*************************************************************
	//
	// 画像描画に関する
	//
	//*************************************************************

	//-------------------------------------------------------------
	// 描画
	// 引　数：RECT*				ソース画像のマスク
	// 　　　　LPDIRECT3DTEXTURE9	テクスチャのポインタ
	// 　　　　RECT*				描画先の位置
	// 　　　　DWORD				透明度
	//-------------------------------------------------------------
	void DrawSprite(
		RECT* pSrcRect, 
		LPDIRECT3DTEXTURE9 pTexture,
		RECT* pDstRect, 
		DWORD dwColor = 255,
		float angle = 0.0f);

	//-------------------------------------------------------------
	// スプライトレンダリング開始
	// 備　考：描画前に呼び出しを必ず
	//-------------------------------------------------------------
	void SpriteBegin();

	//-------------------------------------------------------------
	// スプライトレンダリング終了
	// 備　考：描画後に呼び出しを必ず
	//-------------------------------------------------------------
	void SpriteClose();

	//*************************************************************
	//
	// エフェクトシステム
	//
	//*************************************************************

	//-------------------------------------------------------------
	// データの設定
	// 引　数：const float	視野角（ラジアン角）
	// 　　　　const float	アスペクト比（WindowWidth / WindowHeight）
	// 　　　　const float	前方クリップ面
	// 　　　　const float	後方クリップ面
	//-------------------------------------------------------------
	void InitProjection(
		const float fov, 
		const float aspect,
		const float nearClip,
		const float farClip);

	//-------------------------------------------------------------
	// エフェクトの追加
	// 引　数：EFK_CHAR*	ファイル名
	//-------------------------------------------------------------
	void AddEffect(const EFK_CHAR* strFileName);

	//-------------------------------------------------------------
	// エフェクトの追加
	// 引　数：const int	配列の番目
	// 　　　　EFK_CHAR*	ファイル名
	//-------------------------------------------------------------
	void AddEffect(const int index, const EFK_CHAR* strFileName);

	//-------------------------------------------------------------
	// エフェクトの更新
	// 引　数：CCamera*		カメラのポインタ
	//-------------------------------------------------------------
	void UpdateEffect(CCamera* pCamera);

	//-------------------------------------------------------------
	// エフェクトの再生
	// 引　数：const int	配列の番目
	// 　　　　Vector3		3次元ベクトル
	//-------------------------------------------------------------
	void PlayEffect(const int index, Vector3& VecPos);

	//-------------------------------------------------------------
	// エフェクトの再生
	// 引　数：const int	配列の番目
	// 　　　　Vector3*		3次元ベクトルポインタ
	//-------------------------------------------------------------
	void PlayEffect(const int index, Vector3* pVecPos);

	//-------------------------------------------------------------
	// カメラ座標の更新
	// 引　数：Camera*		カメラクラスのポインタ
	//-------------------------------------------------------------
	void SetCameraMatrix(CCamera* pCamera);

	//-------------------------------------------------------------
	// エフェクト描画
	//-------------------------------------------------------------
	void DrawEffect();

	//*************************************************************
	//
	// レンダリングシステム
	//
	//*************************************************************

	//-------------------------------------------------------------
	// デバイスの取得
	// 戻り値：LPDIRECT3DDEVICE9	デバイスのポインタ
	//-------------------------------------------------------------
	LPDIRECT3DDEVICE9 GetDevice() const;

	//-------------------------------------------------------------
	// バックバッファのクリア
	// 引　数：const DWORD	色の指定
	//-------------------------------------------------------------
	void Clear(const DWORD value);

	//-------------------------------------------------------------
	// レンダリング開始
	//-------------------------------------------------------------
	void BeginRender();

	//-------------------------------------------------------------
	// レンダリング終了
	//-------------------------------------------------------------
	void EndRender();

	//-------------------------------------------------------------
	// 画面スワップ
	//-------------------------------------------------------------
	void Present();

	//-------------------------------------------------------------
	// シェーダの描画設定
	// 引　数：ShaderType シェーダの種類
	// 備　考：メッシュの描画前に呼び出しをしてください。
	//-------------------------------------------------------------
	void SetShaderState(const DWORD value);

	//*************************************************************
	//
	// ウィンドウ設定
	//
	//*************************************************************

	//-------------------------------------------------------------
	// ウィンドウ設定の取得
	// 戻り値：const WindowSettings*	ウィンドウ構造体のポインタ
	//-------------------------------------------------------------
	WindowSettings GetWindowSettings() const;

	//*************************************************************
	//
	// 入力に対する
	//
	//*************************************************************

	//-------------------------------------------------------------
	// キー入力情報の取得
	// 引　数：BYTE	キーコード
	// 備　考：キーのおしっぱなし
	//-------------------------------------------------------------
	bool IsKeyDown(const BYTE keyCode);

	//-------------------------------------------------------------
	// キー入力情報の取得
	// 引　数：BYTE	キーコード
	// 備　考：キーの一度のみ
	//-------------------------------------------------------------
	bool IsKeyPressed(const BYTE keyCode);

	//-------------------------------------------------------------
	// キー入力情報の取得
	// 引　数：BYTE	キーコード
	// 備　考：キーのおしっぱなし
	//-------------------------------------------------------------
	bool IsMouseDown(const BYTE mouseButton);

	//-------------------------------------------------------------
	// キー入力情報の取得
	// 引　数：BYTE	キーコード
	// 備　考：キーの一度のみ
	//-------------------------------------------------------------
	bool IsMousePressed(const BYTE mouseButton);

	//-------------------------------------------------------------
	// マウスの位置
	// 戻り値：POINT	X,Y
	//-------------------------------------------------------------
	POINT GetMousePos() const;

	//-------------------------------------------------------------
	// マウスの移動量
	// 戻り値：POINT	X,Y
	//-------------------------------------------------------------
	POINT GetMouseMove() const;

	//-------------------------------------------------------------
	// マウスのホイール
	// 戻り値：int		ホイール
	//-------------------------------------------------------------
	int GetMouseWheel() const;

	//-------------------------------------------------------------
	// パッドの取得
	// 引　数：int	キーコード
	// 備　考：キーのおしっぱなし
	//-------------------------------------------------------------
	bool IsPadDown(const int padButton);

	//-------------------------------------------------------------
	// パッドの取得
	// 引　数：int	キーコード
	// 備　考：キーの一度のみ
	//-------------------------------------------------------------
	bool IsPadPressed(const int padButton);

	//-------------------------------------------------------------
	// ジョイスティックの取得
	// 引　数：int	キーコード
	// 備　考：キーの一度のみ
	//-------------------------------------------------------------
	float GetJoyStickState(const int joyStick);

	//-------------------------------------------------------------
	// コントローラーが接続されているか？
	//-------------------------------------------------------------
	bool IsControllerConnect();

	//*************************************************************
	//
	// 時間に関する
	//
	//*************************************************************

	//-------------------------------------------------------------
	// タイマーの更新
	//-------------------------------------------------------------
	void UpdateTimer();

	//-------------------------------------------------------------
	// １ループ当たりの時間
	//-------------------------------------------------------------
	double GetDeltaTime() const;

	//*************************************************************
	//
	// デバッグ用に関する
	//
	//*************************************************************

	//-------------------------------------------------------------
	// INFO
	// 引　数：string	テキスト
	// 備　考：[Info]
	//-------------------------------------------------------------
	void DebugInfo(string strInfo);

	//-------------------------------------------------------------
	// WARNING
	// 引　数：string	テキスト
	// 備　考：[WARNING]
	//-------------------------------------------------------------
	void DebugWorn(string strWorn);

	//-------------------------------------------------------------
	// ERROR
	// 引　数：string	テキスト
	// 備　考：[ERROR]
	//-------------------------------------------------------------
	void DebugErr(string strError);

	//-------------------------------------------------------------
	// DEBUG
	// 引　数：string	テキスト
	// 備　考：[DEBUG]
	//-------------------------------------------------------------
	void DebugText(string strDebug);

private:

	//-------------------------------------------------------------
	// ビューポートの初期化
	//-------------------------------------------------------------
	void InitializeViewPort();

	//レンダリングクラス
	CRenderSystem* m_pClsRenderSystem;

	//ファイル管理クラス
	CFileManager* m_pClsFileManager;

	//入力クラス
	CInput*	m_pClsInput;

	//タイマークラス
	CTimer* m_pClsTimer;

	//デバッグログクラス
	CDebugLog* m_pClsDebugLog;

	//オーディオ再生クラス
	CAudio* m_pClsAudio;

	//画像描画クラス
	CSprite* m_pClsSprite;

	//エフェクト再生クラス
	CEffectSystem* m_pClsEffectSystem;

	//ウィンドウ設定
	WindowSettings m_pWindowSettings;

	//ウィンドウハンドルクラス
	HWND m_hWnd;

	//ビューポート
	D3DVIEWPORT9 m_viewport;

	//コピー防止
	CSystem& operator=(const CSystem&);
	CSystem(const CSystem&);
};