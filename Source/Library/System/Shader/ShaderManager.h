//*************************************************************
//
// ShaderManager.h
//
// シェーダクラス管理
//
// Date: 2019/07/30 更新
//
//*************************************************************

#pragma once

//=============================================================
// インクルード
//=============================================================
#include "../../Application/Window.h"
#include "../../Utility/Singleton.h"
#include "DefaultShader/DefaultShader.h"
#include "ShadowMap/ShadowMap.h"
#include "ShadowDepth/ShadowDepth.h"

//=============================================================
// シェーダ列挙体
//=============================================================
enum Shader
{
	DEPTH,
	SHADOW,
	DEFAULT,
};

//=============================================================
// クラス定義
//=============================================================
class CShaderManager : public CSingleton<CShaderManager>
{
public:

	//-------------------------------------------------------------
	// 初期化
	// 引　数：CWindowSystem*	ウィンドウシステムクラスのポインタ
	//-------------------------------------------------------------
	void Initialize(LPDIRECT3DDEVICE9 pDevice, CWindowSystem * pWindowSystem);

	//-------------------------------------------------------------
	// 更新
	//-------------------------------------------------------------
	void Update();

	//-------------------------------------------------------------
	// シェーダの追加
	//-------------------------------------------------------------
	void AddShader(CShaderBase* pShader);

	//-------------------------------------------------------------
	// シェーダの描画設定
	// 引　数：ShaderType シェーダの種類
	// 備　考：メッシュの描画前に呼び出しをしてください。
	//-------------------------------------------------------------
	void SetShaderState(Shader Value);

	//-------------------------------------------------------------
	// 現在のシェーダ状態の取得
	// 戻り値：ShaderType シェーダの種類
	// 備　考：描画前に設定変更のため呼び出し。
	//-------------------------------------------------------------
	Shader GetShaderState() const;

	//-------------------------------------------------------------
	// シェーダの取得
	// 引　数：const int 
	//-------------------------------------------------------------
	CShaderBase* GetShader(const UINT index);

	//-------------------------------------------------------------
	// シェーダのパラメータ設定
	// 引　数：D3DXMATRIX* ビュー行列の設定 
	//-------------------------------------------------------------
	void SetMatView(const Matrix& pMatView);

	//-------------------------------------------------------------
	// シェーダのパラメータ設定
	// 引　数：D3DXMATRIX* プロジェクション行列の設定 
	//-------------------------------------------------------------
	void SetMatProj(const Matrix& pMatProj);

	//-------------------------------------------------------------
	// シェーダのパラメータ設定
	// 引　数：D3DXMATRIX* ライトビュー行列の設定 
	//-------------------------------------------------------------
	void SetMatLView(const Matrix& pMatView);

	//-------------------------------------------------------------
	// シェーダのパラメータ設定
	// 引　数：D3DXMATRIX* プロジェクション行列の設定 
	//-------------------------------------------------------------
	void SetMatLProj(const Matrix& pMatProj);

	//-------------------------------------------------------------
	// シェーダのパラメータ設定
	// 引　数：D3DXMATRIX* ライトビュープロジェクション行列の設定 
	//-------------------------------------------------------------
	void SetMatLViewProj(Matrix* pMatViewProj);

	//-------------------------------------------------------------
	// シェーダのパラメータ設定
	// 引　数：D3DXMATRIX* シャドウ微調整用行列
	//-------------------------------------------------------------
	void SetMatLBias(const Matrix& pMatProj);

	//-------------------------------------------------------------
	// シェーダのパラメータ設定
	// 引　数：D3DXMATRIX* ライト視点3次元ベクトルの設定 
	//-------------------------------------------------------------
	void SetLightEye(const Vector3* pVecEye);

	//-------------------------------------------------------------
	// シェーダのパラメータ設定
	// 引　数：D3DXMATRIX* カメラ視点3次元ベクトルの設定 
	//-------------------------------------------------------------
	void SetCameraEye(const Vector3* pVecEye);

	//-------------------------------------------------------------
	// コンストラクタ
	//-------------------------------------------------------------
	CShaderManager();

	//-------------------------------------------------------------
	// デストラクタ
	//-------------------------------------------------------------
	~CShaderManager();

private:

	LPDIRECT3DDEVICE9 m_pDevice;
	std::vector<CShaderBase*> m_vecShader;

	Shader m_nowShaderState;
	D3DXMATRIX m_matView;
	D3DXMATRIX m_matProj;
	D3DXMATRIX m_matLView;
	D3DXMATRIX m_matLProj;
	D3DXMATRIX m_matLBias;
	D3DXMATRIX* m_matLViewProj;
	D3DXVECTOR4 m_vecLightDir;
	D3DXVECTOR4 m_vecCameraEye;
};