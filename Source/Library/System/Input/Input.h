//*************************************************************
//
// Input.h
//
// 入力クラス
//
// Date: 2019/07/30 更新
//
//*************************************************************

#pragma once

//=============================================================
// インクルード
//=============================================================
#include "../../Application/Window.h"
#include "KeyConfig.h"

//=============================================================
// クラス定義
//=============================================================
class CInput
{
public:

	//-------------------------------------------------------------
	// シングルトン生成
	//-------------------------------------------------------------
	static CInput* Create();

	//-------------------------------------------------------------
	// 初期化
	// 引　数：CWindowSystem*	ウィンドウシステムクラスのポインタ
	//-------------------------------------------------------------
	void Initialize(CWindowSystem* pWindowSystem);

	//-------------------------------------------------------------
	// 更新
	//-------------------------------------------------------------
	void Update();

	//-------------------------------------------------------------
	// 解放
	//-------------------------------------------------------------
	void Release();

	//-------------------------------------------------------------
	// キー入力情報の取得
	// 引　数：BYTE	キーコード
	// 備　考：キーのおしっぱなし
	//-------------------------------------------------------------
	bool IsKeyDown(const BYTE keyCode);

	//-------------------------------------------------------------
	// キー入力情報の取得
	// 引　数：BYTE	キーコード
	// 備　考：キーの一度のみ
	//-------------------------------------------------------------
	bool IsKeyPressed(const BYTE keyCode);

	//-------------------------------------------------------------
	// キー入力情報の取得
	// 引　数：BYTE	キーコード
	// 備　考：キーのおしっぱなし
	//-------------------------------------------------------------
	bool IsMouseDown(const BYTE mouseButton);

	//-------------------------------------------------------------
	// キー入力情報の取得
	// 引　数：BYTE	キーコード
	// 備　考：キーの一度のみ
	//-------------------------------------------------------------
	bool IsMousePressed(const BYTE mouseButton);

	//-------------------------------------------------------------
	// マウスの移動量
	// 戻り値：POINT	X,Y
	//-------------------------------------------------------------
	POINT GetMouseMove() const;

	//-------------------------------------------------------------
	// マウスのホイール
	// 戻り値：int		ホイール
	//-------------------------------------------------------------
	int GetMouseWheel() const;

	//-------------------------------------------------------------
	// パッドの取得
	// 引　数：int	キーコード
	// 備　考：キーのおしっぱなし
	//-------------------------------------------------------------
	bool IsPadDown(const int padButton);

	//-------------------------------------------------------------
	// パッドの取得
	// 引　数：int	キーコード
	// 備　考：キーの一度のみ
	//-------------------------------------------------------------
	bool IsPadPressed(const int padButton);

	//-------------------------------------------------------------
	// ジョイスティックの取得
	// 引　数：int	キーコード
	// 備　考：キーの一度のみ
	//-------------------------------------------------------------
	float GetJoyStickState(const int joyStick);

	//-------------------------------------------------------------
	// コントローラーが接続されているか？
	//-------------------------------------------------------------
	bool IsControllerConnect();

private:

	//-------------------------------------------------------------
	// キーボード初期化
	// 引　数：HWND	ウィンドウハンドル
	//-------------------------------------------------------------
	HRESULT InitializeKeyboard(HWND hWnd);

	//-------------------------------------------------------------
	// マウス初期化
	// 引　数：HWND	ウィンドウハンドル
	//-------------------------------------------------------------
	HRESULT InitializeMouse(HWND hWnd);

	//-------------------------------------------------------------
	// ジョイスティック初期化
	// 引　数：HWND	ウィンドウハンドル
	//-------------------------------------------------------------
	HRESULT InitializeJoyStick(HWND hWnd);

	//-------------------------------------------------------------
	// ジョイスティック更新
	//-------------------------------------------------------------
	bool UpdateJoyStick();

	//-------------------------------------------------------------
	// ジョイスティックパッドのコールバック関数
	// 引　数：DIDEVICEINSTANCE*	
	// 　　　　void*				
	//-------------------------------------------------------------
	static BOOL __stdcall EnumJoysticksCallback(const DIDEVICEINSTANCE* pdidInstance, void* pContext);

	//-------------------------------------------------------------
	// ジョイスティックパッドのコールバック関数
	// 引　数：DIDEVICEOBJECTINSTANCE*	
	// 　　　　void*				
	//-------------------------------------------------------------
	static BOOL __stdcall EnumAxesCallback(const DIDEVICEOBJECTINSTANCE* pdidoi, void* pContext);

	//デバイス
	LPDIRECTINPUT8 m_pDirectInput;

	//キーボード
	LPDIRECTINPUTDEVICE8 m_pKeyBoard;
	BYTE m_keyNowBuf[256];
	BYTE m_keyOldBuf[256];

	//マウス
	LPDIRECTINPUTDEVICE8 m_pMouse;
	DIMOUSESTATE m_mouseState;

	//ジョイスティック
	LPDIRECTINPUTDEVICE8 m_pJoystick;
	DIJOYSTATE m_joyState;
	bool m_joyPad[KeyConfig::TRACKPAD];
	bool m_oldJoyPad[KeyConfig::TRACKPAD];
	float m_joyStick[6];
};