//*************************************************************
//
// Camera.hpp
//
// カメラ専用クラス
//
// Date: 2019/07/30 更新
//
//*************************************************************

#pragma once

//=============================================================
// インクルード
//=============================================================
#include "../../Common.h"

//=============================================================
// クラス定義
//=============================================================
class CCamera
{
public:

	//-------------------------------------------------------------
	// 変数定義
	//-------------------------------------------------------------
	Vector3 m_vecEye;		//視点
	Vector3 m_vecLookAt;	//注目点
	Vector3 m_vecUp;		//上方向
	Vector3 m_vecForward;	//前方向
	Vector3 m_vecRight;		//右方向

	//-------------------------------------------------------------
	// コンストラクタ
	//-------------------------------------------------------------
	CCamera();

	//-------------------------------------------------------------
	// デストラクタ
	//-------------------------------------------------------------
	~CCamera();

	//-------------------------------------------------------------
	// 初期化
	// 引　数：LPDIRECT3DDEVICE9	デバイスのポインタ
	// 　　　　const float			視野角
	// 　　　　const float			アスペクト比
	// 　　　　const float			クリップ面(近い)
	// 　　　　const float			クリップ面(遠い)
	//-------------------------------------------------------------
	void Initialize(
		LPDIRECT3DDEVICE9 pDevice, 
		const float fov, 
		const float aspect,
		const float clipNear, 
		const float clipFar);

	//-------------------------------------------------------------
	// 解放
	//-------------------------------------------------------------
	void ShutDown();

	//-------------------------------------------------------------
	// サードパーソンカメラの設定
	// 引　数：const Vector3	注目点
	// 　　　　const Vector3	回転角度
	// 　　　　const float		注目点から横に動かした距離
	// 　　　　const float		注目点から後ろに引き離した距離
	//-------------------------------------------------------------
	void SetThirdPerson(
		const Vector3 vecLookAt,
		const Vector3 vecAngle,
		const float lookAtHori, 
		const float lookAtBehind);

	//-------------------------------------------------------------
	// 上方向の再計算
	//-------------------------------------------------------------
	void RecalculateUpDirection();

	//-------------------------------------------------------------
	// 視錘台の再計算
	//-------------------------------------------------------------
	void RecalculateFrustumPlane();

	//-------------------------------------------------------------
	// ビュー行列の更新とデバイスへのセット
	//-------------------------------------------------------------
	void UpdateViewMatrix();

	//-------------------------------------------------------------
	// 射影行列の更新とデバイスへのセット
	//-------------------------------------------------------------
	void UpdateProjectionMatrix();

	//-------------------------------------------------------------
	// ビュー行列の取得
	// 戻り値：Matrix	ビュー行列
	// 備　考：シェーダ用
	//-------------------------------------------------------------
	Matrix GetViewMatrix() const;

	//-------------------------------------------------------------
	// 逆ビュー行列の取得
	// 戻り値：Matrix	逆ビュー行列
	// 備　考：ビルボード用
	//-------------------------------------------------------------
	Matrix GetInvViewMatrix() const;

	//-------------------------------------------------------------
	// 投影行列の取得
	// 戻り値：Matrix	投影行列
	// 備　考：シェーダ用
	//-------------------------------------------------------------
	Matrix GetProjectionMatrix() const;

	//-------------------------------------------------------------
	// 視錘台の６点板の取得
	// 戻り値：D3DXPLANE	６つの板の一枚
	// 備　考：カリング用
	//-------------------------------------------------------------
	D3DXPLANE GetFrustumPlane(const int index) const;

	//-------------------------------------------------------------
	// 視野角の取得
	// 戻り値：float		視野角
	//-------------------------------------------------------------
	float GetFov() const;

	//-------------------------------------------------------------
	// 視野角の設定
	// 引　数：const float	視野角(ラジアン)
	//-------------------------------------------------------------
	void SetFov(const float fov);
private:

	//視錘台用板
	enum FrustumPlane
	{
		PLANE_LEFT,
		PLANE_RIGHT,
		PLANE_UP,
		PLANE_DOWN,
		PLANE_NEAR,
		PLANE_FAR,
		PLANE_MAX,
	};

	//デバイスのポインタ
	LPDIRECT3DDEVICE9 m_pDevice;

	//視錘台
	D3DXPLANE m_frustum[PLANE_MAX];

	//ビュー行列
	Matrix m_matView;

	//プロジェクションの設定
	float m_fov;
	float m_aspect;
	float m_near;
	float m_far;
	Matrix m_matProjection;

	//コピー防止
	CCamera& operator=(const CCamera&);
	CCamera(const CCamera&);
};